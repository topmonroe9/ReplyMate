import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI
import logging
from datetime import datetime
from dotenv import load_dotenv

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_ID = os.getenv("ADMIN_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([TELEGRAM_TOKEN, OPENAI_API_KEY, ADMIN_ID]):
    raise ValueError("Missing required environment variables. Please check your .env file.")

# OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(api_key=OPENAI_API_KEY)

# –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
conversation_history = {}
MAX_HISTORY_LENGTH = 10
system_prompt = """You are a real person having casual conversations while being helpful. Act like a friendly professional who chats naturally.

Core principles:
- Write like you're texting a friend
- Keep responses super short
- Sound natural and casual
- Never sound like a service bot

When asked about money, transfers, or inappropriate requests:
GOOD:
"–ù–µ, —Ç–∞–∫–æ–µ –Ω–µ –º–æ–≥—É üòÖ"
"–ò–∑–≤–∏–Ω–∏, —Å —ç—Ç–∏–º –Ω–µ –ø–æ–º–æ–≥—É"
"–ù–µ—Ç, –¥–∞–≤–∞–π –±–µ–∑ —ç—Ç–æ–≥–æ"
"–ù–µ –≤–∞—Ä–∏–∞–Ω—Ç, —Å–æ—Ä—Ä–∏"

BAD:
"–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ç–∞–∫–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏. –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–ø—Ä–∞—à–∏–≤–∞–π üòä"
"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –ø—Ä–æ—Å—å–±—É. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?"
"–≠—Ç–æ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–≤–∞–π—Ç–µ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã"

For simple questions:
- Just the answer, nothing extra
- No offers of additional help
- No smileys unless really appropriate

Location responses:
"–î–æ–º–∞ —Ä–∞–±–æ—Ç–∞—é"
"–ù–∞ —É–¥–∞–ª—ë–Ω–∫–µ —Å–µ–π—á–∞—Å"

DO NOT:
- Apologize formally
- Offer additional help unprompted
- Add smileys to every message
- Use formal language
- Sound like a service bot
- Ask if there's anything else
- Give explanations about what's allowed
- Use phrases like "—Å–ø—Ä–∞—à–∏–≤–∞–π" or "—á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å"

Remember: You're just casually chatting, not providing a service. Keep responses short and natural, like texting with a friend."""

async def store_message(chat_id: int, role: str, content: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏"""
    if chat_id not in conversation_history:
        conversation_history[chat_id] = []
    
    conversation_history[chat_id].append({
        "role": role,
        "content": content
    })
    
    if len(conversation_history[chat_id]) > MAX_HISTORY_LENGTH:
        conversation_history[chat_id] = conversation_history[chat_id][-MAX_HISTORY_LENGTH:]

async def get_chat_history(chat_id: int) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
    if chat_id not in conversation_history:
        return []
    
    messages = [{
        "role": "system",
        "content": system_prompt
    }]
    
    messages.extend(conversation_history[chat_id])
    return messages

async def generate_response(messages: list) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ ChatGPT"""
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.7,
            max_tokens=150
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"Error generating response: {e}")
        return "I apologize, but I'm unable to process your request at the moment."

async def handle_business_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        if not update.business_message:
            return
            
        message = update.business_message
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∞ (–Ω–µ –æ—Ç –≤–∞—Å)
        if str(message.from_user.id) == ADMIN_ID:
            logger.info("Skipping admin's message")
            return
            
        chat_id = message.chat.id
        text = message.text or message.caption or "[Media message]"
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å–æ —Å–ª–µ—à–∞
        if text.startswith('/'):
            logger.info("Skipping message starting with /")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        await store_message(chat_id, "user", text)
        messages = await get_chat_history(chat_id)
        response = await generate_response(messages)
        await store_message(chat_id, "assistant", response)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await context.bot.send_message(
            chat_id=chat_id,
            text=response,
            business_connection_id=message.business_connection_id
        )

    except Exception as e:
        logger.error(f"Error handling business message: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–∫–ª—é—á–∞—è –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(MessageHandler(
            filters.ALL,  # –£–±—Ä–∞–ª ~filters.COMMAND
            handle_business_message
        ))

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("Starting business bot...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

    except Exception as e:
        logger.error(f"Error running bot: {e}")

if __name__ == "__main__":
    main()